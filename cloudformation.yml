AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  Environment:
    Type: String
    Default: s
    AllowedValues:
      - s
      - p
    Description: Where you will be running the stack. Staging (s) or Production (p)
Mappings:
  SubnetMap:
    ap-southeast-2:
      s: "subnet-public-2"
      p: "subnet-public-2"
  VpcMap:
    ap-southeast-2:
      s: "vpc-example"
      p: "vpc-example"
Resources:
  GrafanaDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: CNAME
      TTL: 30
      ResourceRecords: 
        - !GetAtt ElasticLoadBalancer.DNSName
      HostedZoneName: exampleapp.dev
      Name: application.exampleapp.dev
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Join ['-', [IAM, "customapp-profile"]]
      Path: /
      Roles:
        - !Ref 'IAMAssumeInstanceRole'
  IAMAssumeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - '*:*'
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: !Join ['-', [IAM,"customapp-policy"]]
      RoleName: !Join ['-', [!Ref Environment,"customapp-role"]]
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP from load balancer
      SecurityGroupIngress:
        - FromPort: '80'
          IpProtocol: tcp
          SourceSecurityGroupId: !GetAtt 'ELBSecurityGroup.GroupId'
          ToPort: '80'
        - FromPort: '22'
          ToPort: '22'
          IpProtocol: 'tcp'
      VpcId: !FindInMap [VpcMap, !Ref "AWS::Region", !Ref Environment]
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      SecurityGroups:
        - !Ref 'ELBSecurityGroup'
      Subnets: !Split [',', !FindInMap [SubnetMap, !Ref "AWS::Region", !Ref Environment]]
      CrossZone: 'true'
      HealthCheck:
        HealthyThreshold: '3'
        Interval: '30'
        Target: !Join ['', ['HTTP:', '80', '/check/']]
        Timeout: '5'
        UnhealthyThreshold: '5'
      Listeners:
        - InstancePort: '80'
          LoadBalancerPort: '80'
          Protocol: HTTP
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable Access HTTP and HTTPS
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: '80'
          IpProtocol: tcp 
          ToPort: '80'
      VpcId: !FindInMap [VpcMap, !Ref "AWS::Region", !Ref Environment]
  ApplicationAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref 'ApplicationLaunchConfig'
      LoadBalancerNames: 
        - !Ref 'ElasticLoadBalancer'
      MaxSize: '1'
      MinSize: '1'
      VPCZoneIdentifier: !Split [',', !FindInMap [SubnetMap, !Ref "AWS::Region", !Ref Environment]]
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Environment, "customapp"]]
          PropagateAtLaunch: true
  ApplicationLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId: ami-025bb060
      InstanceType: m3.medium
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: blackslate
      SecurityGroups:
        - !GetAtt 'InstanceSecurityGroup.GroupId'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "#!/bin/bash -x\n"
            - "docker run -d "
            - "--restart=always "
            - "-p 80:3000 mycustomapp"
Outputs:
  GrafanaURL:
    Description: The URL to access my app server
    Value: !Join ["",["https://", !Ref AppDNSRecord]]
